day04
앙상블기법 -> 머신러닝 -> 수학개념

수업예제 링크
https://colab.research.google.com/drive/16cTPuHMDidY-v30Ozl0T6kjwkOX9JXpv?usp=sharing

1. 앙상블기법
	여러개의 기본 모델을 활용하여 하나의 새로운 모델을 만들어 내는 것
	모델의 예측성능을 향상시키기 위하여 사용함

1) 보팅
	서로 다른 알고리즘을 가진 분류기를 결합하는 방식
	하드보팅 : 다수결 원칙 기반
	소프트보팅 : 레이블 값 결정확률을 모두 더하고 평균낸 확률이 가장 높은 레이블값을
		최종 보팅 결과값으로 선택함

2) 배깅
	데이터를 재구성하여 다양한 모델을 만들어 내기위한 앙상블 기법
	의사결정트리처럼 과적합이 발생하기 쉬운 모델에서 사용됨

3) 부스팅
	이전 모델들이 어려운 예제 높은 가중치를 주어 학습시키는 방법
	AdaBoost : 오분류된 데이터에 가중치를 부여하면서 부스팅을 수행
	Gradient Boosting : 이전 라운드에서 합성 분류기별 오류를 새로운 약한
		분류기를 학습
		경사하강법을 통해 오류를 최소화하는 방법으로 모델 향상

+) plot_tree 함수
	결정 트리를 시각화할 때 사용하는 함수

decision_tree : 시각화할 결정 트리 모델을 지정
feature_names : 특징의 이름을 지정하는 문자열 배열, 설정 시 트리 노드에 해당 특징의 이름이 표시
class_names : 클래스의 이름을 지정하는 문자열 배열, 설정 시 트리 노드에 해당 클래스의 이름이 표시
max_depth : 트리의 최대깊이를 제한, 기본값 None, 트리의 모든 깊이를 표시
label : 각 노드에 레이블을 표시할지에 대한 여부, 기본값 None
filled : 노드의 채우기를 사용할 지 여부, 기본값 False
impurity : 불순도 지표를 표시할지에 대한 여부, 기본값 True
proportion : 클래스 비율을 표시할 지 여부, 기본값 False
rotate : 트리를 회전하여 가로로 표시할 지 여부, 기본값 False
rounded : 노드 상자의 모서리를 둥글게 할지 여부, 기본값 False
fontsize : 텍스트의 폰트 크기를 지정, 기본값 10
ax : matplotlib의 축을 지정, 기본값 None-새로운 축이 생성됨

+) 분류(Classification), 회귀(Regression)
분류
	입력 데이터를 여러 클래스 또는 범주 중에 하나로 할당하는 문제
	ex) 스팸메일분류, 손글씨 숫자인식, 암진단
회귀
	입력데이터와 연속형 목표 변수 사이의 관계를 모델링하는 문제
	ex) 주택가격예측, 주식가격예측, 온도예측


2. 머신러닝
	인공지능 > 머신러닝 > 딥러닝

1) 인공지능(Artificial Intellignce, AI)
	음성인식, 상품추천, 위치기반 서비슷 등
	인공지능 단어 1956년 처음 등장(초기에는 프로그래밍 코드대로만 일을 수행하는 형태)
	지식기반 프로그래밍 or 규칙기반 인공지능
	
2) 머신러닝(Machine Learning, ML)
	인공지능의 한 분야
	주어진 데이터를 기반으로 패턴을 파악하여 학습
	학습된 모형(모델)을 이용해 예측하거나 분류하는 역할을 수행한다
	
3) 딥러닝(Deep Lerning, DL)
	머신러닝에서 한단계 더 발전한 형태, 머신러닝의 한 분야
	신경망(Neural Network)구조를 기반으로 학습하는 방법

3. 지도학습 vs 비지도학습
1) 지도학습(Supervised Lerning)
	정답을 알고 있는 데이터를 기반으로 학습하는 방법
	주어진 특성 데이터를 기반으로 타겟(target)을 학습할 수 있다
	주어진 피처 데이터(특성 데이터)와  타겟 데이터를 기반으로 나누는 것을 분류(Classification)

2) 비지도학습(Unsupervised Lerning)
	정답을 모르는 데이터를 기반으로 학습하는 방법
	타겟 데이터의 정보가 주어져있지 않다
	타겟 데이터 없이 피처데이터만으로 비지도 학습을 통해 데이터를 나누는 것을 군집(Clustering)

	지도학습			비지도학습
	k최근접 이웃 알고리즘	k평균 클러스터링
	선형 회귀 분석		계층 클러스터링
	로지스틱 회귀 분석		DBSCAN
	나이브 베이즈		가우시안 혼합행렬
	의사 결정 나무		주성분분석
	서포트 벡터 머신

4. 머신러닝의 전반적인 과정
	데이터로부터 피처 데이터와 타겟 데이터의 관계나 패턴을 학습하여
	분류나 예측하는 것이 목표이다
	학습을 통해 판단하는 알고리즘을 모형,모델(Model)이라고 한다
	머신러닝의 모델의 특징을 나타내는 요소에는 
	파라미터(parameter)와 하이퍼 파라미터(hyper parameter)
	- 파라미터 : 데이터에 기반한 값으로 머신러닝 모델의 특징을 나타낸다
		데이터로부터 구한 파라미터는 새로운 데이터를 예측, 분류하는데 영향을 끼친다
	ex) 정규분포의 파라미터는 평균과 분산이다. 주어진 데이터로부터 구한 평균과 분산이
	얼마냐에 따라 정규분포에 형태가 달라진다
	- 하이퍼 파라미터 : 사용자가 직접 입력해야하는 값이다
	ex) k-평균 알고리즘을 사용, 모델 생성시 사용자가 직접 k값을 입력해야한다
	이때 k값은 데이터로부터 구하는 값이 아니다


문제 정의 및 목표 설정
	어떤 종류의 문제를 해결하고자 하는지, 예측할 대상이 무엇인지 등을 파악

데이터 수집
	문제해결에 필요한 데이터를 수집

데이터 전처리
	분석 및 모델링에 적합한 형태로 가공
	데이터 정자, 누락된 값 처리, 이상치 제거, 특성선택 및 추출, 정규화 등이 포함

데이터 탐색 및 시각화(EDA)
	데이터를 탐색하여 패턴이나 관계를 파악하고 모델링에 유용한 특성 발견
	데이터 특성을 시각적으로 표현

모델 선택
	해결하려는 문제에 적합한 머신러닝 알고리즘을 선택함
	분류문제 로지스틱회귀, 의사결정트리, 랜덤포레스트 등
	회귀문제 선형회귀, 의사결정회귀, 랜덤포레스트 회귀 등

모델 훈련
	선택한 모델을 훈련데이터에 적합시킨다
	모델은 입력데이터와 해당하는 출력레이블을 학습하여 패턴을 파악하고 일반화 할 수 있도록 함

모델 평가
	테스트 데이터 또는 교차 검증을 사용하여 모델을 성능을 평가

모델 튜닝 및 개선
	모델의 하이퍼 파라미터를 조정하고 실험을 통해 모델의 성능을 향상

모델 배포 및 유지보수
	개발된 모델을 실제 환경 배포하고 모니터링하여 성능을 추적하고 유지보수

	




5. 선형대수와 머신러닝 관계
	행렬연산 -> 데이터를 잘 다룰 수 있는 능력

1) 행렬
	행렬 행(row) 가로방향, 열(column) 세로방향 구성
	스칼라(scalar) or 벡터(vector)로 구성
	스칼라 
		행렬을 구성하는 각 숫자를 의미
		행렬의 구성요소 중 최소단위에 해당
		크기만 가짐
	벡터
		스칼라의 집합
		행벡터(원소를 행 방향으로 나열), 열벡터(열 방향으로 나열)
		크기와 방향을 모두 가짐
	행렬
		벡터의 집합(행벡터의 집합 or 열벡터의 집합)

	a_ij	: i 행번호, j 열번호
	
	a_11	a_12
	a_21	a_22
	a_31	a_32

		행렬의 크기는 행렬의 행수와 열 수로 나타낸다
		행렬의 크기 3X2

	텐서(Tensor)
		n차원으로 일반화 한 행렬을 의미
		텐서플로우의 유래가 되는 이름
		텐서플로우는 텐서의 흐름을 다루는 라이브러리

2) 대각행렬(diagonal matrix)
	행렬의 대각원소 이외의 모든 성분이 0인 행렬을 의미

3) 단위행렬(indentiy matrix)
	행 번호와 열 번호가 동일한 주 대각선의 원소가 모두 1이며, 나머지 원소는 모두 0인 정사각행렬을 의미
	정사각행렬(square matirx)은 행과 열의 크기가 같은 행렬을 의미함

4) 전치행렬(transposed matrix)
	기존 행렬의 행과 열을 바꾸는 행렬을 의미함
	행이 열이되고, 열이 행이 된다

	a_ij	-> a_ji

5) 행렬의 덧셈, 뺄셈
	각 행렬에 대응되는 원소를 더하거나 빼면 된다
	연산대상이 되는 행렬의 행 번호와 열번호가 일치하는 원소끼리 계산된다
	
6) 행렬의 스칼라 곱
	스칼라 x 행렬 => 스칼라 곱
	모든 행렬 원소에 곱하려는 스칼라를 곱하면 결과를 구할 수 있다

	행렬에 스칼라 2를 곱한다는 것은 행렬을 구성하는 모든 원소가 2배 커지는 것을 의미하며
	행렬을 구성하는 벡터들의 길이가 2배로 길어진다는 것을 의미한다

7) 행렬 곱(Matrix multiplication)
	행렬의 곱셈에 여러종류 있다
	행렬간의 서로 곱하는 것을 의미한다
	특정 조건을 만족해야 연산이 가능하다
	앞 행렬의 열 크기와 뒤 행렬의 행 크기가 일치해야 계산이 가능하다

8) 행렬의 원소 곱(Matrix element multiplication)
	차원이 동일한 두 행렬의 동일 위치 원소를 서로 곱하는 방법이다

	⊙ 행렬의 원소곱을 나타내는 기호(element-wise product, Hadamard product)
	A ⊙ B
	딥러닝 최적화 관련 알고리즘에서 자주 사용된다

9) 행렬식(Determinant)
	행렬의 특성을 하나의 숫자로 표현하는 방법
	행렬식의 절대값은 해당 행렬이 단위공간을 얼마나 늘렸는지, 줄였는지를 나타냄
	
	만약 행렬식이 1이라면 해당 행렬이 단위 공간의 부피와 같다는 것을 의미, 
	행렬식이 0이라면 해당 행렬이 나타내는 부피가 0이라는 의미이다
	행렬식의 크기가 10, 해당 행렬이 단위 공간 부피의 10배에 해당한다는 의미이다

	det(A) 정방행렬에서만 정의된다
	정방행렬 : 행과 열의 개수가 동일한 행렬 (n x n) 형태의 행렬 n 행렬의 차원
	
	행렬이 3차원 공간에서 3개 벡터로 구성되어있다면
	3차원 공간에서 시각화 가능, 해당행렬의 행렬식을 구한다는 것은 행렬을 구성하고 있는 벡터로 만들수잇는
	도형의 부피를 계산한다는 의미와 같음

10) 역행렬(Inverse matrix)
	역수와 비슷한 개념
	행렬 A에 대해 AB = I(단위행렬)를 만족하는 행렬 B가 존재한다는 의미
	행렬 A에 행렬 B를 곱한 결과는 단위행렬(I)
	행렬 B를 행렬 A의 역행렬이라고 부른다
	역행렬이 존재하기 위한 조건은 해당 행렬의 행렬식이 0이 되면 안된다
	(역행렬을 구하려는 행렬의 행렬식이 0이라면 역행렬을 존재하지 않는다)
	역행렬이 존재하는 행렬 가역행렬이라고 부른다




















